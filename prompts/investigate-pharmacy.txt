## QUESTIONS

Let’s first determine what fields represent the following:
-	patient ID, sometimes labeled as member ID
-	fill date
-	NDC code, a 10- or 11-digit code, sometimes with dashes
-	claim number
-	paid amount, which represents the amount paid by the plan (and not by the patient or any other entity)
-	paid date

If there are multiple plausible candidates for any of these fields, please enumerate them, and explain how you picked the correct choice among them.

*****

Let’s take a look at these fields in order to determine the transactionality of this data. Order the data by patient ID, fill date, NDC code, and claim number. Typically, each patient ID + fill date + NDC trio represents the natural key for a unique claim. However, there are sometimes multiple rows per claim, to represent reversals or adjustments.
Ideally, reversals and adjustments are clearly shown by having multiple rows per claim ID with a sensible progression of adjustment codes, increase-to paid amounts, and different paid dates. 
Things to watch out for include
-	pure duplicates in the data, with the same claim number, paid date, and paid amount
-	resultant paid amounts instead of increase-to paid amounts, which would be indicated by never seeing any negative paid amounts
-	claim number that vary within the natural key of patient ID + fill date + NDC, which can indicate that the field being called the claim number is actually more of a transaction ID.

*****

It would be worth verifying our intuitions by canvassing across the entire table. We want to see if the claim number ever varies within the natural key of patient ID + fill date + NDC. Something like the following SQL should work:

```
select member_id, fill_date, ndc_code, min(claim_number), max(claim_number)
from my_table
group by member_id, fill_date, ndc_code
having min(claim_number) <> max(claim_number)
limit 5
```
If any claim numbers are returned, we’ll want to see all the fields for a pair of matched claim numbers, with particular focus on the paid date, paid amount, and adjustment status flag if it’s present.

*****

It would similarly be instructive to see if there are claims that have both positive and negative paid amounts. If no claims have both positives and negatives, either we’re operating on the resultant standard, or the field called claim number is actually a transaction ID.

```
select claim_number, min(paid_amt), max(paid_amt)
from my_table
group by claim_number 
having sum(case when paid_amt like '%-%' then 1 else 0 end) > 0
and sum(case when paid_amt not like '%-%' then 1 else 0 end) > 0
limit 5
```
This SQL assumes the paid_amt field is a varchar; if the paid_amt field is numeric then a simple inequality filter would do.

*****

Are there any fields representing adjustment flags, denied codes, denied reasons, or payment status that align with our current hypothesis about the transactionality of the data?

*****

There should be fields representing "days supply" and "quantity dispensed". Can you find these fields. If the paid amount goes negative on reversals or some adjustments, verify that these field track negative as well. If, instead, the paid amount is resultant, verify that "days supply" and "quantity dispensed" also appear to be resultant.

*****

Important date fields include prescribe date, fill date, and paid date. Determine the date mask format of these fields (for example, YYYY-MM-DD or DD-Mon-YY). Also, find the min and the max for each field to see if there are any illegal placeholder dates (such as "1753-01-01") that we'll want to interpret as null.

*****

What fields contain patient (member) information? Alongside the patient ID we often see name, birthdate, gender, and address, along with other identifiers such as the Medicare Beneficiary Identifier (MBI). 

If the birthdate is present, use the same min- and max- query to verify that it only has valid values. For gender, enumerate the distinct values.