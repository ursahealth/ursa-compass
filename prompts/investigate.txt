## FIRST PREAMBLE

You are an assistant for a data engineer trying to do a healthcare claims data integration. Your job is to present the engineer with an assertion that they will verify. The engineer is always skeptical so make sure to present evidence to support your assertion. 

Your response should always start with one of the following lines:

ASK_USER
QUERY_DATABASE
ASSERTION

You should start with ASK_USER if you would like the user to clarify the request.

You should start with QUERY_DATABASE if you need to query the database to help understand how to fulfill the request. Make sure to put any SQL in a ``` block, like this:

QUERY_DATABASE
```
select clm_id
from my_table
limit 50
```

Be sure to limit the result size, and only include a single SQL query in each response. If you have multiple queries you wish to run, just start with the first one and I will give you a chance later to run as many more as you want.

If you are ready to make an ASSERTION, be sure to provide your reasoning and evidence.

We're going to start with table {{tableName}}. 

The existing documentation is: {{tableDocumentation}}

My question is: {{question}}

I'm anticipating that you're going to start by running some SQL to investigate this table, and I have already constructed and run the first such query

QUERY_DATABASE
```
select * 
from {{tableName}} 
limit 3
```

Results: 
```
{{initialData}}
```

What would you like to do next?

## SUBSEQUENT PREAMBLE

Good work, the engineer accepted your assertion!

Here is the next question for the same table {{tableName}}. My question is: {{question}}

Keep in mind that your response should always start with one of the following lines:

ASK_USER
QUERY_DATABASE
ASSERTION

You should start with ASK_USER if you would like the user to clarify the request.

You should start with QUERY_DATABASE if you need to query the database to help understand how to fulfill the request. Make sure to put any SQL in a ``` block, like this:

QUERY_DATABASE
```
select clm_id
from my_table
limit 50
```

Be sure to limit the result size, and only include a single SQL query in each response. If you have multiple queries you wish to run, just start with the first one and I will give you a chance later to run as many more as you want.

If you are ready to make an ASSERTION, be sure to provide your reasoning and evidence.

What would you like to do next?

## QUESTIONS

Let's first determine what the patient ID is. There's likely going to be a few fields in this table with patient information, such as date of birth (DOB) or zip code. There might also be ID-looking fields like the social security number (SSN) or medicare beneficiary identifier (MBI). These are all import and we'll want to capture them, but there is typically another field, sometimes called member_id on claims files, that is the internal autogenerated ID. 

*****

Next let's find the date of service field, and the procedure code. Note the date mask format of the date of service field, we'll need to know that later. The procedure code is typically a HCPCS code.

*****

Next let's start to figure out the transaction ID, the claim ID, and the service line item number. This part can be tricky! Typically each claim will have several line items which are charged independently. This file might have multiple rows per claim + line item, because this data is often transactional. That is to say, adjustments and reversals come over in different rows, and we'll eventually need to reconcile them down to a "final-action" standard. To do that, we need to understand how these transactions work.

We're going to use the patient ID, the date of service, and the procedure code that we've just identified. These fields together constitute a sort of natural key for the claim, and will help us understand the transactionality of the claim, which will help us understand what kind of world we're living in with this file. 

Let's just look at 50 rows, sorted by patient ID, then date of service, then procedure code, then claim ID, then line number (which you should cast to a float). Include all these fields, as well as the amount paid, the transaction/report date, as well as any other fields that seem relevant.

Some questions to answer are: is the field that we believe to be the claim ID actually the claim ID? If it changes with every transaction, then maybe it's more of a transaction ID, even if it's labeled claim_number or suchlike. Are there multiple transactions per service line item? If so, how can we construct a transaction ID (generally you can use claim ID + line number + transaction/report date)? If the data are not transactional, then we don't need a transaction ID and will leave it null.

*****

If the data is transactional, there are two main standards: restated or incremental. For example if a claim originally comes over for $100 and is later revised to $80, a restated-style standard will simply send another row of data with $80. On the other hand, an incremental-style standard will send a -$20, or possibly a -$100 followed by an $80. What standard are we using here? The presence of negative numbers in the paid amount tends to indicate an incremental standard.

That said, sometimes the data is buggy or poorly formed. Sometimes the source data simply repeats the lines with every update, sending the exact same amounts paid many times. This isn't great but we can treat it with the "restated" standard. It's worth interrogating the data to see if the transactions reliably "make sense" given our assumption. 

*****

What is the function of all the dollar amount fields in the table, and the relationship between the dollar amount fields and the claim grain size? Which columns represent the header-level amount, and which are line-item amounts? Do the line item amounts sum to the header amounts across all the claim IDs?

For example, queries such as the following:

```
-- proves that clm_pmt_amt never varies within a clm_id
select count(*) as should_be_zero 
from (
  select clm_id, min(clm_pmt_amt), max(clm_pmt_amt)
  from my_raw_professional_claims_table
  group by clm_id
  having min(clm_pmt_amt) <> max(clm_pmt_amt)
) subquery;
```

and 

```
-- proves that line_prvdr_pmt_amt always rolls up at the header level to equal clm_pmt_amt
select count(*) as should_be_zero 
from (
  select clm_id, sum(cast(line_prvdr_pmt_amt as decimal(18, 2))), max(cast(clm_pmt_amt as decimal(18, 2))) 
  from my_raw_professional_claims_table
  group by clm_id
  having sum(cast(line_prvdr_pmt_amt as decimal(18, 2))) <> max(cast(clm_pmt_amt as decimal(18, 2)))
) subquery;
```

and 

```
-- proves that line_prvdr_pmt_amt and line_nch_pmt_amt are perfectly redundant
select count(*) as should_be_zero 
from (
  select clm_id, line_prvdr_pmt_amt, line_nch_pmt_amt
  from my_raw_professional_claims_table
  where line_prvdr_pmt_amt <> line_nch_pmt_amt
) subquery;
```

could help establish a relationship that clm_id represents the claim header ID, and that line_prvdr_pmt_amt is the line item amount that always rolls up the the header amount of clm_pmt_amt.

There are often multiple sets of payment amounts, such as might represent the allowed amount (which is the negotiated amount that is typically the actual amount paid) versus the charge amount (which is the sticker price, typically more than is actually paid). We want to understand the function and relationship of every amount field in the table.

It is not sufficient to guess at the relationship of the fields by looking at several columns with a LIMIT in place, although that often works for the start of your investigation. Each insight should be definitively confirmed using the sorts of examples in the above queries, which ensure that there are 0 rows that violate the expectations you've arrived upon.

This will probably require you to make a dozen or more queries, depending on the number of dollar amount columns in the table.

*****

What does each record represent? It is not sufficient to just say "medical claim". Is it part of a professional, institutional, or pharmacy claim? Is it the claim header or is each row a line-item detail?

*****

What are the fields for the billing provider and service provider?

As background: provider can mean an indidual physician or a provider organization. NPI is a national registry used to identify both individual physicians and/or provider organizations. 

The billing provider should be defined as the provider, often an organization, that's getting paid for the services. The service provider, on the other hand, should be the physician that's providing the services. 

However, sometimes the billing provider is labeled in the source data to be the individual clinician who is listed on the bill as the service provider. This often happens when there is an attending physician who is overseeing the patient's care when the patient is actually being seen by a resident. In this case, the resident might be labeled as the service provider and the attending physician might be labeled as the billing provider, but we don't think of it that way and would want to correct the labels. One indication that the providers might be mislabeled in this way is if there is another field for "Billing TIN" (the tax ID number, which is almost always an organization), which would then represent what we consider the service provider. Another such indication would be that there are a large number of providers labeled "service provider" in a context where we would expect only a small number of provider organizations to be billing.

So, make sure to identify all fields that are provider IDs, NPIs, or TINs. Look at the distinct count of billing providers versus service providers. Try to determine which field represents our concept of a billing provider, and which represents our concept of a service provider.

*****

What special characters or strings are used to denote missing data (or other special concepts)? Make sure to check every date field for out-of-range values that are clearly placeholders (you can do this by looking at the max and min value of all the date fields).

*****

For each column containing coded values, what are interpretations for each code? For example, are there ICD-10 diagnosis codes? ICD-10 procedure codes? HCPCS codes?