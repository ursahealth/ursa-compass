playbook:
  goal: Understand structure, content, identifiers, financial components, and transaction handling of incoming medical claims data (Institutional and Professional).
  steps:
    - step: file-footprint-determination
      label: Determine the footprint of data coverage for each file
      checks:
        - check: id-current-date
          label: Select the current date from the database so that we know what day it is.
        - check: id-file
          label: Identify unique ID for each file
          description: "Identify the file name or ID that can be used for subsequent analysis of the file footprints and data generating process. If ursa_file_instance_id is available, use that. If not, look for file IDs or file names. Then check to see if there are multiple files that have been ingested. It is often the case on initial integration that only a single historical file has been loaded."
        - check: id-anchor-date
          label: Identify the anchor date for the file, i.e. the date that was used to filter the generated file (e.g., service date, claim date, paid date).
          description: "Anchor dates are typically display clean start and ends, i.e. the first of the month, or consistent spans between beginning and end dates, i.e. 1 month spans for incremental files or one or multiple years for restated files. Potential dates that should be checked include service date, claim date, and most often paid date. Before running analysis, make sure to cast any text feidsl as dates"
          dependencies:
            - id-file
        - check: determine-file-footprint
          label: Analyze the contents of each file.
          description: "Now that we have identified the date used to cut the file, we need to understand the coverage of each file based on those dates. Analyze volume of records, count of patients, and sum of dollars. Are there consistent volumes across files? Are there some files that look like one time historical cuts and others that are ongoing incremental files?"
          dependencies:
            - id-anchor-date

    - step: critical-field-checks
      label: Check for presence and validity of critical fields.
      description: "There are several critical fields that we would expect to see in professional and institutional (facility) medical claims. We need to check for their presence, population, and validity."
      checks:
        - check: critical-field-claim-type-code
          label: Check for an explicit claim type code that would differentiate between institutional and professional claims.
          description: "Claims files could be restricted to one claim type (institutional or professional) or could have a field that indicates the claim type. If neither are true then we can use the other indicators to deduce the claim type."
        - check: critical-field-type-of-bill
          label: Check presence and population of type_of_bill codes (indicative of Institutional).
          description: "The presence of a type of bill code should indicate an institutional claim. The field format can vary, but we expect a 3 digit code. To confirm validity, we can check against ursa.mi_ursa_core_127"
        - check: critical-field-place-of-service
          label: Check presence and population of place_of_service codes (indicative of Professional).
          description: "The presence of a place of service code should indicate a professional claim. The field format can vary, but we expect a 2 digit code. 1 digit codes should be padded with a leading zero. To confirm validity, we can check against	ursa.mi_ursa_core_133"
        - check: critical-field-revenue-codes
          label: Check for presence of revenue codes (indicative of Institutional).
          description: "The presence of revenue codes should indicate an institutional claim. The field format can vary. It often comes through as 3 digits but we pad with leading zeores to 4 digits. To confirm validity, we can check against ursa.mi_ursa_core_109"
        - check: critical-field-cpt-hcpcs-codes
          label: Check for CPT/HCPCS codes.
          description: "Check for validity via presence in ursa.mi_ursa_core_101"
        - check: critical-field-procedure-codes-icd-pcs
          label: Identify ICD-10-PCS procedure codes (typically on institutional inpatient claims).
        - check: cocritical-fieldre-diagnosis-codes
          label: Identify principal and other diagnosis codes (ICD-10).
        - check: critical-field-harmonize-indicators
          label: Verify harmonization between different claim type indicators if multiple exist.
          dependencies:
            - critical-field-claim-type-code
            - critical-field-type-of-bill
            - critical-field-place-of-service
        - check: critical-field-reliable-claim-class-medical
          label: Decide on the most reliable field(s) to determine claim class (Institutional vs. Professional).
          dependencies:
            - critical-field-harmonize-indicators
        - check: critical-field-patient-id
          label: Identify patient or member ID.
        - check: critical-field-line-number
          label: Identify service line numbers.

    - step: medical-core-data-elements
      label: Identify and assess core medical claim data elements (header and line).
      checks:
        - check: core-service-dates
          label: Verify presence and format of service start and end dates (both header and line).
        - check: core-admission-discharge-dates
          label: For institutional claims, verify presence of admission and discharge dates.
        - check: core-provider-billing
          label: Identify billing provider information (NPI, TIN).
        - check: core-provider-rendering-service
          label: Identify rendering/service provider information (typically NPI, for professional claims).
        - check: core-provider-facility
          label: Identify facility provider information (for institutional claims).
        - check: core-provider-attending-operating
          label: Identify attending and operating provider information (for institutional claims).

    - step: medical-financial-elements
      label: Assess financial components of medical claims.
      checks:
        - check: financial-paid-amount-medical
          label: Identify and validate plan paid amounts.
        - check: financial-charged-amount-medical
          label: Identify charged amounts.
        - check: financial-allowed-amount-medical
          label: Identify allowed amounts.
        - check: financial-patient-responsibility-medical
          label: Identify patient responsibility amounts (copay, coinsurance, deductible).
        - check: financial-negative-amounts-medical
          label: Analyze existence of negative dollar amounts (e.g., for reversals or adjustments).
          description: "Negative amounts typically indecate reversals or adjustments. Are there many negative amounts? If so, the data likely follows what we could call an increase to standard. If there are not, and the minimum values are zeroes then it likely follows what we would call a resulting standard."


    - step: medical-claim-identification
      label: Determine primary medical claim identifiers (header and line) and key linking fields.
      checks:
        - check: id-claim-service-line-natural-key
          label: Generate a natural key for claim service lines
          description: "A natural key is a combination of fields that can uniquely identify a claim service line. This typically includes member ID, service date, procedure code, and potentially a line number when available. We use pipe as the delimiter in the concatenated field. This is useful for tracking the same service line across multiple files or adjustments and will be used the validate any native identifiers that are available"
        - check: id-header-claim-number
          label: Identify the primary header-level claim identifier.
          description: "This could be a native identifier like a claim ID or claim number, some type of substring of one of those fields, or a natural key that must be constructed. Note that the source will often contain a field that they call claim ID but it functions more like a transaction ID. We consider the claim ID to be the header ID that unifies all service lines submitted under the same claim. We will need to evaluate how the same service lines (using our natural key for claim service lines) appear over time and across different files. A claim header can include many service line items, but the same service line should only map to one claim header ID"
          dependencies:
            - id-claim-service-line-natural-key
        - check: id-claim-service-line-natural-key
          label: Identify the claim service line identifier
          description: "It is possible that the source will have a native identifier for claim service lines. If so, we need to validate it against our natural key for claim service lines to ensure that it is reliable. If there is no native identifier, we will use the natural key as the service line identifier"
        - check: id-line-transaction-id
          label: Identify the line-level transaction identifier (e.g., claim number + service line + sequence number).
          description: "This will uniquely identify transactions over the life of a claim, i.e. reverals and adjustments. A claim service line item may have multiple transactions, but a transaction should only resolve to one claim service line. This field could be a native transaction ID, sometimes it may confusingly be called claim ID, and other times it must be constructed using claim service line item ID, paid date, and paid amount. NOTE: this will never be the ursa_serial_id which is just a sequence generated on ingestion"



    - step: medical-transaction-handling
      label: Analyze and define rules for handling medical claim transactions, especially across multiple files.
      description: "Medical claims can be restated or adjusted across different file submissions."
      checks:
        - check: transaction-cross-file-consistency
          label: Analyze how claim details (especially financials) change across different file ingestions for the same claim/line.
          description: "Dollar amounts or statuses for the same transaction can change in subsequent files."
        - check: transaction-most-recent-strategy-medical
          label: Define strategy to identify the most recent, authoritative version of a claim or claim line.
          description: "Often involves using a file effective date or ingestion timestamp."
          dependencies:
            - transaction-cross-file-consistency
        - check: transaction-reversals-adjustments-medical
          label: Identify how claim reversals or adjustments are indicated.
          description: "Unlike Rx, medical claim adjustments might be full restatements rather than explicit reversal transactions."
        - check: transaction-deleted-claims
          label: Determine if claims/lines are explicitly deleted or just disappear from later files.
          description: "Critical for restated data - absence in a later file might mean deletion."
        - check: transaction-header-line-financial-granularity
          label: Determine if financial amounts are primarily at header or line level, and how this is indicated.
          description: "Institutional claims often have header-level financials, professional at line-level. This impacts aggregation."
          dependencies:
            - type-reliable-claim-class-medical # Knowing claim type is crucial here